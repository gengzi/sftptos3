{"version":3,"sources":["src/services/user.ts","src/pages/userManagement/components/UserForm.tsx","src/pages/userManagement/list/index.tsx"],"sourcesContent":["import { request } from '@umijs/max';\n\n// Mock数据，实际项目中应替换为真实API调用\nconst mockUsers = [\n  {\n    id: '1',\n    username: 'admin',\n    email: 'admin@example.com',\n    passwd: 'admin123',\n    access: 'admin',\n    userRootPath: '/admin',\n    storageType: 'local',\n    s3Link: '',\n    clientPublicKey: 'sample-public-key-for-admin',\n    createdAt: '2023-01-01T00:00:00Z',\n  },\n  {\n    id: '2',\n    username: 'user1',\n    email: 'user1@example.com',\n    passwd: 'user123',\n    access: 'user',\n    userRootPath: '/users/user1',\n    storageType: 's3',\n    s3Link: 's3://bucket1',\n    clientPublicKey: 'sample-public-key-for-user1',\n    createdAt: '2023-01-02T00:00:00Z',\n  },\n  {\n    id: '3',\n    username: 'user2',\n    email: 'user2@example.com',\n    passwd: 'user123',\n    access: 'user',\n    userRootPath: '/users/user2',\n    storageType: 'local',\n    s3Link: '',\n    clientPublicKey: '',\n    createdAt: '2023-01-03T00:00:00Z',\n  },\n];\n\n// 获取用户列表\nexport async function queryUsers(params?: { username?: string; current?: number; pageSize?: number }) {\n  try {\n    // 调用真实的API接口\n    const response = await request('/api/user/list', {\n      method: 'GET',\n      headers: {\n        'accept': '*/*',\n      },\n      params: {\n        username: params?.username,\n        page: params?.current ? params.current - 1 : 0,\n        size: params?.pageSize || 10,\n        sort: 'createTime',\n      },\n    });\n    \n    // 根据响应返回结果\n    if (response.success || response.code === 200) {\n      // 转换后端返回的用户数据格式，使其符合前端需求\n      const transformedData = response.data.content.map((user: any) => ({\n        id: user.id.toString(),\n        username: user.username,\n        userRootPath: user.userRootPath,\n        storageType: user.accessStorageType,\n        s3Link: user.accessStorageType === 's3' ? user.accessStorageInfo : '',\n        clientPublicKey: user.secretKey || '',\n        createdAt: user.createTime,\n      }));\n      \n      return {\n        success: true,\n        data: transformedData,\n        total: response.data.totalElements,\n      };\n    } else {\n      // 当code非200时，返回后端提供的错误信息\n      return {\n        success: false,\n        code: response.code,\n        message: response.message || '获取用户列表失败',\n      };\n    }\n  } catch (error) {\n    console.error('获取用户列表失败:', error);\n    return {\n      success: false,\n      message: '获取用户列表失败',\n    };\n  }\n}\n\n// 创建用户\nexport async function createUser(params: any) {\n  try {\n    // 调用真实的API接口\n    const response = await request('/api/user/create', {\n      method: 'POST',\n      headers: {\n        'accept': '*/*',\n        'Content-Type': 'application/json',\n      },\n      data: {\n        username: params.username,\n        passwd: params.passwd,\n        userRootPath: params.userRootPath,\n        accessStorageType: params.storageType,\n        accessStorageInfo: params.s3Link || '',\n        clientPublicKey: params.clientPublicKey || '',\n      },\n    });\n    \n    // 根据响应返回结果\n    if (response.success || response.code === 200) {\n      return {\n        success: true,\n        data: response.data,\n      };\n    } else {\n      // 当code非200时，返回后端提供的错误信息\n      return {\n        success: false,\n        code: response.code,\n        message: response.message || '创建用户失败',\n      };\n    }\n  } catch (error) {\n    console.error('创建用户失败:', error);\n    return {\n      success: false,\n      message: '创建用户失败',\n    };\n  }\n}\n\n// 更新用户\nexport async function updateUser(id: string, params: any) {\n  try {\n    // 调用真实的API接口\n    const response = await request('/api/user/update', {\n      method: 'POST',\n      headers: {\n        'accept': '*/*',\n        'Content-Type': 'application/json',\n      },\n      data: {\n        id: parseInt(id), // 转换为数字类型\n        username: params.username,\n        passwd: params.passwd || '', // 允许不修改密码\n        userRootPath: params.userRootPath,\n        accessStorageType: params.storageType,\n        accessStorageInfo: params.storageType === 's3' ? params.s3Link : '',\n        secretKey: params.clientPublicKey || '',\n      },\n    });\n    \n    // 根据响应返回结果\n    if (response.success || response.code === 200) {\n      return {\n        success: true,\n        data: response.data,\n      };\n    } else {\n      // 当code非200时，返回后端提供的错误信息\n      return {\n        success: false,\n        code: response.code,\n        message: response.message || '更新用户失败',\n      };\n    }\n  } catch (error) {\n    console.error('更新用户失败:', error);\n    return {\n      success: false,\n      message: '更新用户失败',\n    };\n  }\n}\n\n// 获取用户详情\nexport async function getUserDetails(id: string) {\n  try {\n    // 调用真实的API接口\n    const response = await request('/api/user/details', {\n      method: 'GET',\n      headers: {\n        'accept': '*/*',\n      },\n      params: {\n        id: id,\n      },\n    });\n    \n    // 根据响应返回结果\n    if (response.success || response.code === 200) {\n      // 转换后端返回的用户数据格式，使其符合前端需求\n      const userData = {\n        id: response.data.id.toString(),\n        username: response.data.username,\n        userRootPath: response.data.userRootPath,\n        storageType: response.data.accessStorageType,\n        s3Link: response.data.accessStorageType === 's3' ? response.data.accessStorageInfo : '',\n        clientPublicKey: response.data.secretKey || '',\n        createdAt: response.data.createTime,\n      };\n      \n      return {\n        success: true,\n        data: userData,\n      };\n    } else {\n      // 当code非200时，返回后端提供的错误信息\n      return {\n        success: false,\n        code: response.code,\n        message: response.message || '获取用户详情失败',\n      };\n    }\n  } catch (error) {\n    console.error('获取用户详情失败:', error);\n    return {\n      success: false,\n      message: '获取用户详情失败',\n    };\n  }\n}\n\n// 删除用户\nexport async function deleteUser(id: string) {\n  try {\n    // 调用真实的API接口，使用POST请求到/api/user/remove\n    const response = await request('/api/user/remove', {\n      method: 'POST',\n      headers: {\n        'accept': '*/*',\n      },\n      params: {\n        id: id,\n      },\n      data: '', // 空的请求体\n    });\n    \n    // 根据响应返回结果\n    if (response.success || response.code === 200) {\n      return {\n        success: true,\n        data: response.data,\n      };\n    } else {\n      // 当code非200时，返回后端提供的错误信息\n      return {\n        success: false,\n        code: response.code,\n        message: response.message || '删除用户失败',\n      };\n    }\n  } catch (error) {\n    console.error('删除用户失败:', error);\n    return {\n      success: false,\n      message: '删除用户失败',\n    };\n  }\n}","import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { Form, Input, Select, Button, Space, Alert } from 'antd';\nimport type { RuleObject } from 'antd/es/form';\nimport { getS3Names } from '@/services/s3';\n\nconst { Option } = Select;\n\ninterface UserFormProps {\n  initialValues?: any;\n  onFinish: (values: any) => void;\n  onCancel: () => void;\n  formIdPrefix?: string;\n}\n\nconst UserForm = forwardRef(({ initialValues, onFinish, onCancel, formIdPrefix = 'user-form' }: UserFormProps, ref) => {\n  const [form] = Form.useForm();\n  const [s3Links, setS3Links] = useState<Array<{ value: string; label: string }>>([]);\n  const [loadingS3Links, setLoadingS3Links] = useState<boolean>(false);\n\n  // 暴露表单实例给父组件\n  useImperativeHandle(ref, () => ({\n    resetFields: () => form.resetFields(),\n    setFieldsValue: (values: any) => form.setFieldsValue(values),\n  }));\n\n  // 从接口获取s3存储链接\n  const fetchS3Links = async () => {\n    setLoadingS3Links(true);\n    try {\n      const response = await getS3Names();\n      if (response.success) {\n        // 将返回的数据转换为Select选项格式，使用id作为value，s3Name作为label\n        const links = response.data.map((item: any) => ({\n          value: item.id,\n          label: item.s3Name\n        }));\n        setS3Links(links);\n        console.log('获取S3链接成功:', links);\n      } else {\n        console.error('获取s3存储链接失败:', response.message);\n        // 如果获取失败，设置为空数组\n        setS3Links([]);\n      }\n    } catch (error) {\n      console.error('获取s3存储链接失败:', error);\n      setS3Links([]);\n    } finally {\n      setLoadingS3Links(false);\n    }\n  };\n\n  // 专门监听initialValues变化，确保编辑模式下表单值正确更新\n  useEffect(() => {\n    if (initialValues) {\n      // 处理s3Link值，确保与下拉框选项匹配\n      const formattedValues = { ...initialValues };\n      \n      // 确保s3Link字段存在且有值时，先获取S3链接列表\n      if (formattedValues.storageType === 's3' && formattedValues.s3Link) {\n        // 先获取S3链接列表，然后再设置表单值\n        fetchS3Links().then(() => {\n          form.setFieldsValue(formattedValues);\n          console.log('表单值已更新:', formattedValues);\n        });\n      } else {\n        // 当initialValues存在且发生变化时，使用setFieldsValue更新表单值\n        form.setFieldsValue(formattedValues);\n        console.log('表单值已更新:', formattedValues);\n      }\n    }\n  }, [initialValues, form]);\n\n  // 为了安全考虑，密码字段在编辑模式下不回显是正常的\n  // 这是一个安全最佳实践，防止密码泄露\n\n  // 组件挂载时，如果是添加用户模式(没有initialValues)，强制重置表单避免自动填充\n  useEffect(() => {\n    if (!initialValues) {\n      // 重置表单，确保添加用户时表单是空的\n      form.resetFields();\n      console.log('表单已重置');\n    }\n  }, [initialValues, form]);\n\n  // 监听存储类型变化，确保能获取S3链接\n  useEffect(() => {\n    // 检查当前的存储类型或初始值中的存储类型\n    const storageType = form.getFieldValue('storageType') || (initialValues?.storageType);\n    \n    console.log('存储类型检查:', storageType);\n    \n    // 如果存储类型为s3，立即获取S3链接\n    if (storageType === 's3') {\n      console.log('开始获取S3链接...');\n      fetchS3Links();\n    }\n  }, [form]); // 只监听form变化，避免与initialValues的useEffect重复触发\n\n  // 表单验证规则\n  const validatePasswd = (_: RuleObject, value: string) => {\n    if (!value && !initialValues) {\n      return Promise.reject(new Error('请输入密码'));\n    }\n    if (value && value.length < 6) {\n      return Promise.reject(new Error('密码长度至少为6位'));\n    }\n    return Promise.resolve();\n  };\n\n  // 重置表单\n  const handleReset = () => {\n    form.resetFields();\n  };\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={initialValues}\n      onFinish={(values) => {\n        // 先调用父组件的onFinish回调\n        onFinish(values);\n        // 然后重置表单（仅在编辑模式下）\n        if (initialValues) {\n          form.resetFields();\n          console.log('编辑提交完成，表单已清空');\n        }\n      }}\n    >\n      {initialValues && (\n        <Alert\n          message=\"配置生效说明\"\n          description=\"更新的配置信息需用户重新连接SFTP服务才会生效，存量正在连接的用户将继续按照既往配置运行。\"\n          type=\"info\"\n          showIcon\n          style={{ marginBottom: 16 }}\n        />\n      )}\n      <Form.Item\n        name=\"username\"\n        label=\"用户名\"\n        rules={[\n          {\n            required: true,\n            message: '请输入用户名',\n          },\n          {\n            min: 3,\n            message: '用户名长度至少为3位',\n          },\n        ]}\n      >\n        <Input placeholder=\"请输入用户名\" id={`${formIdPrefix}-username`} disabled={!!initialValues} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"passwd\"\n        label=\"密码\"\n        rules={[\n          {\n            validator: validatePasswd,\n          },\n        ]}\n        tooltip=\"添加用户时必须输入密码，编辑用户时密码不填写不会覆盖原密码\"\n      >\n        <Input.Password placeholder=\"请输入密码\" id={`${formIdPrefix}-password`} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"clientPublicKey\"\n        label=\"客户端公钥\"\n        tooltip=\"用于API调用认证的客户端公钥\"\n      >\n        <Input.TextArea rows={4} placeholder=\"请输入客户端公钥\" id={`${formIdPrefix}-clientPublicKey`} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"userRootPath\"\n        label=\"用户根目录\"\n        rules={[\n          {\n            required: true,\n            message: '请输入用户根目录',\n          },\n        ]}\n         tooltip=\"请使用对应操作系统的路径格式，s3存储根目录为空可以设置为 / ,如果存在真实根目录可以设置 dir/dir1/ 即可\"\n      >\n        <Input placeholder=\"请输入用户根目录路径\" id={`${formIdPrefix}-userRootPath`} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"storageType\"\n        label=\"存储类型\"\n        rules={[\n          {\n            required: true,\n            message: '请选择存储类型',\n          },\n        ]}\n      >\n        <Select \n          placeholder=\"请选择存储类型\"\n          onChange={(value) => {\n            console.log('存储类型变更为:', value);\n            if (value === 's3') {\n              fetchS3Links();\n            } else {\n              // 如果切换为其他存储类型，清除s3链接字段的值\n              form.setFieldValue('s3Link', undefined);\n            }\n          }}\n        >\n          <Option value=\"local\">本地文件</Option>\n          <Option value=\"s3\">s3存储</Option>\n        </Select>\n      </Form.Item>\n\n      <Form.Item\n        noStyle\n        shouldUpdate={(prevValues, curValues) => prevValues.storageType !== curValues.storageType}\n      >\n        {({ getFieldValue }) => {\n          const storageType = getFieldValue('storageType');\n          console.log('当前存储类型:', storageType);\n          \n          return storageType === 's3' ? (\n            <Form.Item\n              name=\"s3Link\"\n              label=\"s3存储链接\"\n              rules={[\n                {\n                  required: true,\n                  message: '请选择s3存储链接',\n                },\n              ]}\n            >\n              <Select \n                placeholder=\"请选择s3存储链接\"\n                loading={loadingS3Links}\n              >\n                {s3Links.map(link => (\n                  <Option key={link.value} value={link.value}>{link.label}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n          ) : null;\n        }}\n      </Form.Item>\n\n      <Form.Item>\n        <Space>\n          <Button type=\"primary\" htmlType=\"submit\">\n            {initialValues ? '更新' : '创建'}\n          </Button>\n          <Button onClick={handleReset}>\n            重置\n          </Button>\n          <Button onClick={onCancel}>\n            取消\n          </Button>\n        </Space>\n      </Form.Item>\n    </Form>\n  );\n});\n\nexport default UserForm;","import { useState, useEffect, useRef } from 'react';\r\nimport { Modal, message, Drawer, Button, Space } from 'antd';\r\nimport { ProTable, ProColumns } from '@ant-design/pro-components';\r\nimport { PlusOutlined, EditOutlined, DeleteOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport { queryUsers, createUser, updateUser, deleteUser, getUserDetails } from '@/services/user';\r\nimport UserForm from '../components/UserForm';\r\n\r\nconst { confirm } = Modal;\r\n\r\n// 定义用户数据类型\r\ninterface User {\r\n  id: string;\r\n  username: string;\r\n  userRootPath: string;\r\n  storageType: 'local' | 's3';\r\n  s3Link?: string;\r\n  clientPublicKey?: string;\r\n  createdAt: string;\r\n}\r\n\r\nconst UserList: React.FC = () => {\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [createModalVisible, setCreateModalVisible] = useState<boolean>(false);\r\n  const [editDrawerVisible, setEditDrawerVisible] = useState<boolean>(false);\r\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n  const [refreshKey, setRefreshKey] = useState<number>(0);\r\n  const actionRef = useRef<any>(null);\r\n  const createUserFormRef = useRef<any>(null);\r\n\r\n  // 获取用户列表\r\n  const fetchUsers = async (params?: { username?: string; current?: number; pageSize?: number }) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await queryUsers(params);\r\n      if (response.success) {\r\n        setUsers(response.data || []);\r\n        // 直接返回符合ProTable要求的数据结构\r\n        return {\r\n          data: response.data || [],\r\n          total: response.total || 0,\r\n          success: true,\r\n        };\r\n      } else {\r\n        // 显示后端返回的错误信息\r\n        message.error(response.message || '获取用户列表失败');\r\n        return {\r\n          data: [],\r\n          total: 0,\r\n          success: false,\r\n        };\r\n      }\r\n    } catch (error) {\r\n      message.error('获取用户列表失败');\r\n      return {\r\n        data: [],\r\n        total: 0,\r\n        success: false,\r\n      };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 添加用户\r\n  const handleAddUser = async (values: any) => {\r\n    try {\r\n      const response = await createUser(values);\r\n      if (response.success) {\r\n        message.success('添加用户成功');\r\n        setCreateModalVisible(false);\r\n        // 重置表单\r\n        if (createUserFormRef.current) {\r\n          createUserFormRef.current.resetFields();\r\n        }\r\n        // 刷新表格\r\n        if (actionRef.current) {\r\n          actionRef.current.reload();\r\n        }\r\n      } else {\r\n        // 显示后端返回的错误信息\r\n        message.error(response.message || '添加用户失败');\r\n      }\r\n    } catch (error) {\r\n      message.error('添加用户失败');\r\n    }\r\n  };\r\n\r\n  // 编辑用户\r\n  const handleEditUser = async (values: any) => {\r\n    try {\r\n      const response = await updateUser(currentUser!.id, values);\r\n      if (response.success) {\r\n        message.success('编辑用户成功');\r\n        setEditDrawerVisible(false);\r\n        // 刷新表格\r\n        if (actionRef.current) {\r\n          actionRef.current.reload();\r\n        }\r\n      } else {\r\n        message.error(response.message || '编辑用户失败');\r\n      }\r\n    } catch (error) {\r\n      message.error('编辑用户失败');\r\n    }\r\n  };\r\n\r\n  // 删除用户\r\n  const handleDeleteUser = (id: string) => {\r\n    confirm({\r\n      title: '确定要删除这个用户吗？',\r\n      icon: <ExclamationCircleOutlined />,\r\n      onOk() {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            const response = await deleteUser(id);\r\n            if (response.success) {\r\n              message.success('删除用户成功');\r\n              // 刷新表格\r\n              if (actionRef.current) {\r\n                actionRef.current.reload();\r\n              }\r\n              resolve(undefined);\r\n            } else {\r\n              message.error(response.message || '删除用户失败');\r\n              reject(new Error('删除失败'));\r\n            }\r\n          } catch (error) {\r\n            message.error('删除用户失败');\r\n            reject(error);\r\n          }\r\n        });\r\n      },\r\n    });\r\n  };\r\n\r\n  // 显示编辑抽屉\r\n  const showEditDrawer = async (record: User) => {\r\n    try {\r\n      // 先设置加载状态\r\n      setLoading(true);\r\n      // 调用用户详情接口获取最新数据\r\n      const response = await getUserDetails(record.id);\r\n      if (response.success) {\r\n        console.log('获取用户详情成功:', response.data);\r\n        setCurrentUser(response.data);\r\n        setEditDrawerVisible(true);\r\n      } else {\r\n        message.error(response.message || '获取用户详情失败');\r\n        // 如果获取详情失败，仍然使用列表中的数据作为回退\r\n        console.warn('使用列表中的用户数据作为回退');\r\n        setCurrentUser(record);\r\n        setEditDrawerVisible(true);\r\n      }\r\n    } catch (error) {\r\n      message.error('获取用户详情失败');\r\n      console.error('获取用户详情异常:', error);\r\n      // 如果发生异常，仍然使用列表中的数据作为回退\r\n      setCurrentUser(record);\r\n      setEditDrawerVisible(true);\r\n    } finally {\r\n      // 无论成功失败，都要设置加载状态为false\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 列配置\r\n  const columns: ProColumns<User>[] = [\r\n    {\r\n      title: '用户名',\r\n      dataIndex: 'username',\r\n      key: 'username',\r\n      valueType: 'text',\r\n      sorter: true,\r\n      hideInSearch: false,\r\n    },\r\n    {\r\n      title: '用户根目录',\r\n      dataIndex: 'userRootPath',\r\n      key: 'userRootPath',\r\n      valueType: 'text',\r\n      hideInSearch: true,\r\n    },\r\n    {\r\n      title: '存储类型',\r\n      dataIndex: 'storageType',\r\n      key: 'storageType',\r\n      valueType: 'select',\r\n      valueEnum: {\r\n        local: {\r\n          text: '本地文件',\r\n          status: 'Default',\r\n        },\r\n        s3: {\r\n          text: 's3存储',\r\n          status: 'Success',\r\n        },\r\n      },\r\n      hideInSearch: true,\r\n    },\r\n    {\r\n      title: 's3存储链接',\r\n      dataIndex: 's3Link',\r\n      key: 's3Link',\r\n      valueType: 'text',\r\n      render: (_, record) => {\r\n        // 只有当存储类型为s3时才显示s3链接\r\n        return record.storageType === 's3' ? record.s3Link : '-';\r\n      },\r\n      hideInSearch: true,\r\n    },\r\n    {\r\n      title: '创建时间',\r\n      dataIndex: 'createdAt',\r\n      key: 'createdAt',\r\n      valueType: 'dateTime',\r\n      hideInSearch: true,\r\n    },\r\n    {\r\n      title: '操作',\r\n      valueType: 'option',\r\n      render: (_, record) => (\r\n        <Space>\r\n          <Button\r\n            type=\"link\"\r\n            icon={<EditOutlined />}\r\n            onClick={() => showEditDrawer(record)}\r\n          >\r\n            编辑\r\n          </Button>\r\n          <Button\r\n            type=\"link\"\r\n            danger\r\n            icon={<DeleteOutlined />}\r\n            onClick={() => handleDeleteUser(record.id)}\r\n          >\r\n            删除\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <Space style={{ marginBottom: 16 }}>\r\n        <Button\r\n          type=\"primary\"\r\n          icon={<PlusOutlined />}\r\n          onClick={() => setCreateModalVisible(true)}\r\n        >\r\n          添加用户\r\n        </Button>\r\n      </Space>\r\n\r\n      <ProTable<User>\r\n        columns={columns}\r\n        actionRef={actionRef}\r\n        request={fetchUsers}\r\n        rowKey=\"id\"\r\n        loading={loading}\r\n        pagination={{\r\n          pageSize: 10,\r\n        }}\r\n        search={{\r\n          labelWidth: 'auto',\r\n        }}\r\n        options={{\r\n          setting: {\r\n            listsHeight: 400,\r\n          },\r\n        }}\r\n      />\r\n\r\n      {/* 添加用户模态框 */}\r\n      <Modal\r\n        title=\"添加用户\"\r\n        open={createModalVisible}\r\n        onCancel={() => setCreateModalVisible(false)}\r\n        footer={null}\r\n        afterClose={() => {\r\n          // 模态框关闭后重置表单\r\n          if (createUserFormRef.current) {\r\n            createUserFormRef.current.resetFields();\r\n          }\r\n        }}\r\n      >\r\n        <UserForm \r\n          ref={createUserFormRef}\r\n          formIdPrefix=\"create-user-form\"\r\n          onFinish={handleAddUser} \r\n          onCancel={() => setCreateModalVisible(false)} \r\n        />\r\n      </Modal>\r\n\r\n      {/* 编辑用户抽屉 */}\r\n      <Drawer\r\n        title=\"编辑用户\"\r\n        width={720}\r\n        placement=\"right\"\r\n        onClose={() => setEditDrawerVisible(false)}\r\n        open={editDrawerVisible}\r\n      >\r\n        {currentUser && (\r\n          <UserForm\r\n            formIdPrefix=\"edit-user-form\"\r\n            initialValues={currentUser}\r\n            onFinish={handleEditUser}\r\n            onCancel={() => setEditDrawerVisible(false)}\r\n          />\r\n        )}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;"],"names":[],"mappings":"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"}