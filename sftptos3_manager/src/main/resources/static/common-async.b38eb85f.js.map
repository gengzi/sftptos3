{"version":3,"sources":["src/services/s3.ts"],"sourcesContent":["import { request } from '@umijs/max';\n\n// S3存储配置接口\nexport interface S3Config {\n  id?: string;\n  s3Name: string;\n  endpoint: string;\n  accessKey: string;\n  accessSecret: string;\n  bucket: string;\n  region?: string;\n}\n\n// 创建S3存储配置\nexport async function createS3Storage(params: S3Config) {\n  try {\n    const response = await request('/s3/storage/create', {\n      method: 'POST',\n      data: params,\n    });\n    \n    // 处理响应格式\n    if (response && (response.success || response.code === 200)) {\n      return {\n        success: true,\n        data: response,\n      };\n    } else {\n      return {\n        success: false,\n        message: response.message || '创建S3存储配置失败',\n      };\n    }\n  } catch (error) {\n    console.error('创建S3存储配置失败:', error);\n    return {\n      success: false,\n      message: '创建S3存储配置失败',\n    };\n  }\n}\n\n// 获取S3存储配置列表\nexport async function queryS3Storages(params?: { s3Name?: string; page?: number; size?: number; sort?: string }) {\n  try {\n    const response = await request('/s3/storage/list', {\n      method: 'GET',\n      params: {\n        ...params,\n      },\n    });\n    \n    // 处理分页响应格式\n    if (response && response.code === 200 && response.success) {\n      return {\n        success: true,\n        data: response.data.content || [],\n        total: response.data.totalElements || 0,\n      };\n    } else {\n      return {\n        success: false,\n        message: response.message || '获取S3存储配置列表失败',\n      };\n    }\n  } catch (error) {\n    console.error('获取S3存储配置列表失败:', error);\n    return {\n      success: false,\n      message: '获取S3存储配置列表失败',\n    };\n  }\n}\n\n// 更新S3存储配置\nexport async function updateS3Storage(params: S3Config) {\n  try {\n    const response = await request('/s3/storage/update', {\n      method: 'POST',\n      data: params,\n    });\n    \n    // 处理响应格式\n    if (response && (response.success || response.code === 200)) {\n      return {\n        success: true,\n        data: response,\n      };\n    } else {\n      return {\n        success: false,\n        message: response.message || '更新S3存储配置失败',\n      };\n    }\n  } catch (error) {\n    console.error('更新S3存储配置失败:', error);\n    return {\n      success: false,\n      message: '更新S3存储配置失败',\n    };\n  }\n}\n\n// 删除S3存储配置\nexport async function deleteS3Storage(id: string) {\n  try {\n    const response = await request('/s3/storage/remove', {\n      method: 'POST',\n      params: {\n        id,\n      },\n      data: '',\n    });\n    console.log('删除S3存储配置响应:', response);\n    // 处理响应格式\n    if (response && (response.success || response.code === 200)) {\n      return {\n        success: true,\n        data: response,\n      };\n    } else {\n      // 确保正确传递后端返回的错误信息\n      // 特别是code为1007且message为\"当前配置正在使用中\"的情况\n      return {\n        success: false,\n        message: response.message || '删除S3存储配置失败',\n        code: response.code,\n      };\n    }\n  } catch (error) {\n    console.error( error);\n    return {\n      success: false,\n      message: error.message || '删除S3存储配置失败',\n      code: error.code,\n    };\n  }\n}\n\n// 获取S3名称列表\nexport async function getS3Names() {\n  try {\n    const response = await request('/s3/storage/get/s3names', {\n      method: 'POST',\n    });\n    \n    // 处理响应格式\n    if (response && response.code === 200 && response.success) {\n      // 返回完整的对象数组，包含id和s3Name字段\n      return {\n        success: true,\n        data: response.data || [],\n      };\n    } else {\n      return {\n        success: false,\n        message: response.message || '获取S3名称列表失败',\n      };\n    }\n  } catch (error) {\n    console.error('获取S3名称列表失败:', error);\n    return {\n      success: false,\n      message: '获取S3名称列表失败',\n    };\n  }\n}"],"names":[],"mappings":"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"}